buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.palantir.docker-run' version '0.20.1'
    id "org.flywaydb.flyway" version "5.2.4"
}

configurations { codacy }

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

group = 'com.linkedpipes.lpa'
version = '0.0.1'
sourceCompatibility = 10
targetCompatibility = 10

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')

    compile 'org.springframework.boot:spring-boot-starter-web'
    runtime 'org.springframework.boot:spring-boot-devtools'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    compile 'org.jetbrains:annotations:17.0.0'

    compile 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'

    compile 'org.apache.jena:apache-jena-libs:3.10.0'
    compile 'org.apache.jena:jena-querybuilder:3.10.0'
    compile 'com.typesafe:config:1.3.3'
    compile 'commons-validator:commons-validator:1.6'
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.postgresql:postgresql:42.2.5'
    runtime 'javax.xml.bind:jaxb-api:2.3.0'

    compile 'io.sentry:sentry-spring:1.7.16'

    compile 'com.corundumstudio.socketio:netty-socketio:1.7.17'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceSets {
    main {
        resources {
            srcDir "src/main/config"
        }
    }
}

// Unpacking solution to avoid 64k files limit in jars with spring boot

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

dockerRun {
    name 'my-container'
    image 'linkedpipes/discovery'
    ports '9000:9000'
    daemonize true
    command "-Dplay.crypto.secret=yourRandomSecret"
}

// Jacoco setup

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

// Codacy codecov auto upload

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml",
            "-t",
            "87ac72b5a8d347b5a10a519323d71b6f"
    ]
}

static def lpaRelatedProperties() {
    System.properties.findAll { key, _ ->
        key.startsWith("lpa.") || key.startsWith("spring.datasource.")
    }
}

tasks.withType(Test) {
    systemProperties lpaRelatedProperties()
}

tasks.withType(JavaExec) {
    systemProperties lpaRelatedProperties()
}

test {
    useJUnitPlatform {
        excludeTags 'integration'
    }
}

task testIntegration(type: Test, group: 'verification') {
    useJUnitPlatform()
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/lpa'
    user = 'lpa'
    password = 'example'
}

javadoc {
    options.addBooleanOption('html5', true)
}
