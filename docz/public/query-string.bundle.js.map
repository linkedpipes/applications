{"version":3,"sources":["webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./node_modules/decode-uri-component/index.js","webpack:///./node_modules/split-on-first/index.js","webpack:///./node_modules/query-string/index.js"],"names":["module","exports","str","encodeURIComponent","replace","x","charCodeAt","toString","toUpperCase","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","encodedURI","TypeError","replaceMap","%FE%FF","%FF%FE","exec","result","entries","Object","keys","key","customDecodeURIComponent","string","separator","separatorIndex","indexOf","strictUriEncode","__webpack_require__","decodeComponent","splitOnFirst","encode","value","options","strict","removeHash","hashStart","extract","queryStart","parse","formatter","arrayFormat","accumulator","undefined","newValue","parserForArrayFormat","assign","sort","parseNumbers","parseBooleans","ret","create","trim","param","Number","isNaN","toLowerCase","reduce","Boolean","isArray","keysSorter","a","b","map","stringify","object","index","encoderForArrayFormat","filter","parseUrl","url","query"],"mappings":"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","file":"query-string.bundle.js","sourcesContent":["'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\t\treturn key => (result, value, index) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (index === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(',')];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;\n\t\t\t\tconst newValue = isArray ? value.split(',') : value;\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parse(input, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof input !== 'string') {\n\t\treturn ret;\n\t}\n\n\tinput = input.trim().replace(/^[?#&]/, '');\n\n\tif (!input) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of input.split('&')) {\n\t\tlet [key, value] = splitOnFirst(param.replace(/\\+/g, ' '), '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : decode(value, options);\n\n\t\tif (options.parseNumbers && !Number.isNaN(Number(value))) {\n\t\t\tvalue = Number(value);\n\t\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\t\tvalue = value.toLowerCase() === 'true';\n\t\t}\n\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t}, options);\n\n\tconst formatter = encoderForArrayFormat(options);\n\tconst keys = Object.keys(object);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (input, options) => {\n\treturn {\n\t\turl: removeHash(input).split('?')[0] || '',\n\t\tquery: parse(extract(input), options)\n\t};\n};\n"],"sourceRoot":""}